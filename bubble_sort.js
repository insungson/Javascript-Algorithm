//버블 정렬
//예시
// [5,1,7,4,6,3,2,8] 처음 두 수를 비교해서 순서대로 숫자를 서로 바꿔줍니다.
// [1,5,7,4,6,3,2,8] 5와 7은 이미 정렬되어 있으니까 그대로 놔둡니다.
// [1,5,7,4,6,3,2,8] 7과 4는 서로 바꿔줍니다.
// [1,5,4,7,6,3,2,8]
// [1,5,4,6,7,3,2,8]
// [1,5,4,6,3,7,2,8]
// [1,5,4,6,3,2,7,8] 끝까지 정렬을 했으면 다시 처음부터 비교합니다.
// [1,5,4,6,3,2,7,8]
// [1,4,5,6,3,2,7,8] 5,6은 넘어가고 6,3 순서를 바꿔줍니다.
// [1,4,5,3,6,2,7,8]
// [1,4,5,3,2,6,7,8] 다시 처음부터 비교합니다.
// [1,4,3,5,2,6,7,8]
// [1,4,3,2,5,6,7,8] 다시 처음부터
// [1,3,4,2,5,6,7,8]
// [1,3,2,4,5,6,7,8] 다시 처음부터
// [1,2,3,4,5,6,7,8] 정렬 끝

var bubbleSort = function(array){
    var i,j,temp;
    console.log(array); //확인용
    for(i=0;i<=array.length-1; i++){
        for(j=0;j<=array.length-1-i;j++){ //난 여기서 array.length-1-i  대신 i를 넣었는데...아래를 보자
            if(array[j]>array[j+1]){
                temp = array[j];
                array[j] = array[j+1];
                array[j+1] = temp;
                console.log(`I: ${i} J: ${j}: `,array); //확인용
            }
        }
    }
    return array;
};
console.log(bubbleSort([5,2,4,7,6,1,8,3]));

/////////////////////////////////////////////////
//내가한 삽질....
//위에서 한 삽질 array.length-1-i  대신 i 넣은것..
//때문에 아래와 같은 결과가 나왔다..
//
//아래의 인덱스 번호로 생각할때 
//for문으로 0~7까지 돌리고 
//두번째 for문으로 위치를 바꾼다.
//다시 1~7까지 돌린다.
//두번째 for문으로 위치를 바꾼다. 인덱스 검색 범위가 줄어들기 때문에 전체길이도 첫번째 인덱스 만큼 줄어든다.

// [ 5, 2, 4, 7, 6, 1, 8, 3 ]
// I: 0 J: 0:  [ 2, 5, 4, 7, 6, 1, 8, 3 ]
// I: 1 J: 1:  [ 2, 4, 5, 7, 6, 1, 8, 3 ]
// I: 3 J: 3:  [ 2, 4, 5, 6, 7, 1, 8, 3 ]
// I: 4 J: 4:  [ 2, 4, 5, 6, 1, 7, 8, 3 ]
// I: 5 J: 3:  [ 2, 4, 5, 1, 6, 7, 8, 3 ]
// I: 6 J: 2:  [ 2, 4, 1, 5, 6, 7, 8, 3 ]
// I: 6 J: 6:  [ 2, 4, 1, 5, 6, 7, 3, 8 ]
// I: 7 J: 1:  [ 2, 1, 4, 5, 6, 7, 3, 8 ]
// I: 7 J: 5:  [ 2, 1, 4, 5, 6, 3, 7, 8 ]
// [ 2, 1, 4, 5, 6, 3, 7, 8 ]

//보면.. 많은 부분이 안바뀌었다.. 이유는 i가 늘어나면서 i인덱스 앞부분은 j가 잡아내질 못하기 때문이다..ㅠ.ㅠ

//다시 원래대로 array.length-1-i 로 바꾸면 전체가 검색되기 때문에 잘 나온다.
// [ 5, 2, 4, 7, 6, 1, 8, 3 ]
// I: 0 J: 0:  [ 2, 5, 4, 7, 6, 1, 8, 3 ]
// I: 0 J: 1:  [ 2, 4, 5, 7, 6, 1, 8, 3 ]
// I: 0 J: 3:  [ 2, 4, 5, 6, 7, 1, 8, 3 ]
// I: 0 J: 4:  [ 2, 4, 5, 6, 1, 7, 8, 3 ]
// I: 0 J: 6:  [ 2, 4, 5, 6, 1, 7, 3, 8 ]
// I: 1 J: 3:  [ 2, 4, 5, 1, 6, 7, 3, 8 ]
// I: 1 J: 5:  [ 2, 4, 5, 1, 6, 3, 7, 8 ]
// I: 2 J: 2:  [ 2, 4, 1, 5, 6, 3, 7, 8 ]
// I: 2 J: 4:  [ 2, 4, 1, 5, 3, 6, 7, 8 ]
// I: 3 J: 1:  [ 2, 1, 4, 5, 3, 6, 7, 8 ]
// I: 3 J: 3:  [ 2, 1, 4, 3, 5, 6, 7, 8 ]
// I: 4 J: 0:  [ 1, 2, 4, 3, 5, 6, 7, 8 ]
// I: 4 J: 2:  [ 1, 2, 3, 4, 5, 6, 7, 8 ]
// [ 1, 2, 3, 4, 5, 6, 7, 8 ]